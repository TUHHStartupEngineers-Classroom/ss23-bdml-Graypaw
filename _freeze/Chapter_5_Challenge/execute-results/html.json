{
  "hash": "d411aec6a9a3dfce55542fbf47876f96",
  "result": {
    "markdown": "Load dataset\n\n::: {.cell hash='Chapter_5_Challenge_cache/html/unnamed-chunk-1_eae9ae32668ada18d3421d0295a7c3b1'}\n\n```{.r .cell-code}\ndataset <- read.csv(\"product_backorders.csv\")\n```\n:::\n\n\nPreprocessing\n\n::: {.cell hash='Chapter_5_Challenge_cache/html/unnamed-chunk-2_d1243945295153e22bdf00299e280b43'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(recipes)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttache Paket: 'recipes'\n\nDas folgende Objekt ist maskiert 'package:stringr':\n\n    fixed\n\nDas folgende Objekt ist maskiert 'package:stats':\n\n    step\n```\n:::\n\n```{.r .cell-code}\ndata_recipe <- recipe(went_on_backorder ~ ., data = dataset) %>%\n  step_dummy(all_nominal(), -all_outcomes()) %>%\n  step_zv(all_predictors()) %>%\n  step_normalize(all_predictors()) %>%\n  prep()\n\nprepared_data <- bake(data_recipe, new_data = dataset)\n```\n:::\n\n\nSplitting into training and testing\n\n::: {.cell hash='Chapter_5_Challenge_cache/html/unnamed-chunk-3_e350977948fbd4eac9f21b08217503f1'}\n\n```{.r .cell-code}\nlibrary(rsample)\nlibrary(h2o)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\n----------------------------------------------------------------------\n\nYour next step is to start H2O:\n    > h2o.init()\n\nFor H2O package documentation, ask for help:\n    > ??h2o\n\nAfter starting H2O, you can use the Web UI at http://localhost:54321\nFor more information visit https://docs.h2o.ai\n\n----------------------------------------------------------------------\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttache Paket: 'h2o'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nDie folgenden Objekte sind maskiert von 'package:lubridate':\n\n    day, hour, month, week, year\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nDie folgenden Objekte sind maskiert von 'package:stats':\n\n    cor, sd, var\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nDie folgenden Objekte sind maskiert von 'package:base':\n\n    %*%, %in%, &&, ||, apply, as.factor, as.numeric, colnames,\n    colnames<-, ifelse, is.character, is.factor, is.numeric, log,\n    log10, log1p, log2, round, signif, trunc\n```\n:::\n\n```{.r .cell-code}\nh2o.init()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nH2O is not running yet, starting it now...\n\nNote:  In case of errors look at the following log files:\n    C:\\Users\\jakbo\\AppData\\Local\\Temp\\RtmpiW5lX5\\file2f645491559f/h2o_jakbo_started_from_r.out\n    C:\\Users\\jakbo\\AppData\\Local\\Temp\\RtmpiW5lX5\\file2f6444b28f5/h2o_jakbo_started_from_r.err\n\n\nStarting H2O JVM and connecting:  Connection successful!\n\nR is connected to the H2O cluster: \n    H2O cluster uptime:         3 seconds 496 milliseconds \n    H2O cluster timezone:       Europe/Berlin \n    H2O data parsing timezone:  UTC \n    H2O cluster version:        3.40.0.4 \n    H2O cluster version age:    1 month and 17 days \n    H2O cluster name:           H2O_started_from_R_jakbo_sss762 \n    H2O cluster total nodes:    1 \n    H2O cluster total memory:   3.53 GB \n    H2O cluster total cores:    8 \n    H2O cluster allowed cores:  8 \n    H2O cluster healthy:        TRUE \n    H2O Connection ip:          localhost \n    H2O Connection port:        54321 \n    H2O Connection proxy:       NA \n    H2O Internal Security:      FALSE \n    R Version:                  R version 4.3.0 (2023-04-21 ucrt) \n```\n:::\n\n```{.r .cell-code}\nsplit_h2o <- h2o.splitFrame(as.h2o(prepared_data), ratios = c(0.85))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\ntrain_h2o <- split_h2o[[1]]\nvalid_h2o <- split_h2o[[2]]\n```\n:::\n\n\nSpecifying variables\n\n::: {.cell hash='Chapter_5_Challenge_cache/html/unnamed-chunk-4_71cba6ed32e484a3857eb18c38f23868'}\n\n```{.r .cell-code}\n# Set the target and predictors\ny <- \"went_on_backorder\"\nx <- setdiff(names(train_h2o), y)\n```\n:::\n\n\nGet h2o and start auto-ML-ing\n\n::: {.cell hash='Chapter_5_Challenge_cache/html/unnamed-chunk-5_6da29f2d8dcb5e1257db27815cd7dd30'}\n\n```{.r .cell-code}\nautoml <- h2o.automl(\n  x = x,\n  y = y,\n  training_frame = train_h2o,\n  validation_frame = valid_h2o,\n  max_runtime_secs = 60,\n  nfolds = 5\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |=                                                                     |   2%\n02:09:00.878: User specified a validation frame with cross-validation still enabled. Please note that the models will still be validated using cross-validation only, the validation frame will be used to provide purely informative validation metrics on the trained models.\n02:09:00.893: AutoML: XGBoost is not available; skipping it.\n  |                                                                            \n  |====                                                                  |   5%\n  |                                                                            \n  |======                                                                |   9%\n  |                                                                            \n  |=========                                                             |  13%\n  |                                                                            \n  |===========                                                           |  16%\n  |                                                                            \n  |==============                                                        |  20%\n  |                                                                            \n  |================                                                      |  23%\n  |                                                                            \n  |===================                                                   |  27%\n  |                                                                            \n  |=====================                                                 |  31%\n  |                                                                            \n  |========================                                              |  34%\n  |                                                                            \n  |==========================                                            |  37%\n  |                                                                            \n  |=============================                                         |  41%\n  |                                                                            \n  |===============================                                       |  44%\n  |                                                                            \n  |==================================                                    |  48%\n  |                                                                            \n  |====================================                                  |  51%\n  |                                                                            \n  |======================================                                |  55%\n  |                                                                            \n  |=========================================                             |  58%\n  |                                                                            \n  |===========================================                           |  62%\n  |                                                                            \n  |==============================================                        |  65%\n  |                                                                            \n  |================================================                      |  69%\n  |                                                                            \n  |===================================================                   |  72%\n  |                                                                            \n  |=====================================================                 |  76%\n  |                                                                            \n  |========================================================              |  79%\n  |                                                                            \n  |==========================================================            |  83%\n  |                                                                            \n  |=============================================================         |  87%\n  |                                                                            \n  |===============================================================       |  90%\n  |                                                                            \n  |=================================================================     |  93%\n  |                                                                            \n  |====================================================================  |  97%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n:::\n\n\nGet some info about the results\n\n::: {.cell hash='Chapter_5_Challenge_cache/html/unnamed-chunk-6_f52caee3b5df03d78d46e519fa3d5e4c'}\n\n```{.r .cell-code}\nleaderboard <- automl@leaderboard\nleaderboard\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                                model_id       auc   logloss\n1    StackedEnsemble_AllModels_2_AutoML_1_20230615_20900 0.9558697 0.1642291\n2 StackedEnsemble_BestOfFamily_3_AutoML_1_20230615_20900 0.9554637 0.1655136\n3    StackedEnsemble_AllModels_1_AutoML_1_20230615_20900 0.9551328 0.1651169\n4 StackedEnsemble_BestOfFamily_2_AutoML_1_20230615_20900 0.9548012 0.1665928\n5                          GBM_4_AutoML_1_20230615_20900 0.9526630 0.1715915\n6                          GBM_3_AutoML_1_20230615_20900 0.9508368 0.1731715\n      aucpr mean_per_class_error      rmse        mse\n1 0.7598670            0.1445852 0.2216930 0.04914778\n2 0.7543325            0.1358076 0.2223946 0.04945934\n3 0.7584030            0.1630633 0.2224688 0.04949236\n4 0.7522492            0.1450006 0.2233598 0.04988962\n5 0.7397641            0.1519742 0.2266921 0.05138933\n6 0.7378238            0.1638846 0.2270788 0.05156477\n\n[15 rows x 7 columns] \n```\n:::\n:::\n\n::: {.cell hash='Chapter_5_Challenge_cache/html/unnamed-chunk-7_358577b813cf257300964ae27e4ef736'}\n\n```{.r .cell-code}\ndata_transformed_tbl <- leaderboard %>%\n        as_tibble() %>%\n        select(-c(aucpr, mean_per_class_error, rmse, mse)) %>% \n        mutate(model_type = str_extract(model_id, \"[^_]+\")) %>%\n        slice(1:15) %>% \n        rownames_to_column(var = \"rowname\") %>%\n        # Visually this step will not change anything\n        # It reorders the factors under the hood\n        mutate(\n          model_id   = as_factor(model_id) %>% reorder(auc),\n          model_type = as.factor(model_type)\n          ) %>% \n          pivot_longer(cols = -c(model_id, model_type, rowname), \n                       names_to = \"key\", \n                       values_to = \"value\", \n                       names_transform = list(key = forcats::fct_inorder)\n                       ) %>% \n        mutate(model_id = paste0(rowname, \". \", model_id) %>% as_factor() %>% fct_rev())\n\ndata_transformed_tbl %>%\n        ggplot(aes(value, model_id, color = model_type)) +\n        geom_point(size = 3) +\n        geom_label(aes(label = round(value, 2), hjust = \"inward\")) +\n        \n        # Facet to break out logloss and auc\n        facet_wrap(~ key, scales = \"free_x\") +\n        labs(title = \"Leaderboard Metrics\",\n             subtitle = paste0(\"Ordered by: \", \"auc\"),\n             y = \"Model Postion, Model ID\", x = \"\") + \n        theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](Chapter_5_Challenge_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='Chapter_5_Challenge_cache/html/unnamed-chunk-8_6a125c8022c79156cf357ce54fc3d9c9'}\n\n```{.r .cell-code}\ngrid_01 <- h2o.grid(\n\n    # See help page for available algos\n    algorithm = \"deeplearning\",\n    \n    # I just use the same as the object\n    grid_id = \"grid_01\",\n    \n    # The following is for ?h2o.deeplearning()\n    # predictor and response variables\n    x = x,\n    y = y,\n    \n    # training and validation frame and crossfold validation\n    training_frame   = train_h2o,\n    validation_frame = valid_h2o,\n    nfolds = 5,\n    \n    # Hyperparamters: Use deeplearning_h2o@allparameters to see all\n    hyper_params = list(\n        # Use some combinations (the first one was the original)\n        hidden = list(c(10, 10, 10), c(50, 20, 10), c(20, 20, 20)),\n        epochs = c(10, 50, 100)\n    )\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n:::\n\nOutput results\n\n::: {.cell hash='Chapter_5_Challenge_cache/html/unnamed-chunk-9_16a318285f64b1223838c4336b17b351'}\n\n```{.r .cell-code}\ngrid_01\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nH2O Grid Details\n================\n\nGrid ID: grid_01 \nUsed hyper parameters: \n  -  epochs \n  -  hidden \nNumber of models: 9 \nNumber of failed models: 0 \n\nHyper-Parameter Search Summary: ordered by increasing logloss\n     epochs       hidden       model_ids logloss\n1  10.39664 [50, 20, 10] grid_01_model_4 0.55442\n2  10.40684 [10, 10, 10] grid_01_model_1 0.83789\n3  52.01498 [20, 20, 20] grid_01_model_8 0.88825\n4 104.81117 [20, 20, 20] grid_01_model_9 1.04452\n5  10.39846 [20, 20, 20] grid_01_model_7 1.20611\n6  52.00752 [50, 20, 10] grid_01_model_5 1.23357\n7 104.78753 [10, 10, 10] grid_01_model_3 1.57944\n8 104.80448 [50, 20, 10] grid_01_model_6 2.21182\n9  51.99366 [10, 10, 10] grid_01_model_2 2.21955\n```\n:::\n:::\n\n\nLoad model\n\n::: {.cell hash='Chapter_5_Challenge_cache/html/unnamed-chunk-10_5344199da94ab43d931a603c93c2974a'}\n\n```{.r .cell-code}\nmodel <- h2o.loadModel(\"leadermodel_h2o\\\\StackedEnsemble_AllModels_4_AutoML_11_20230615_00001\")\nperformance_h2o <- h2o.performance(model, newdata = as.h2o(valid_h2o))\nperformance_tbl <- performance_h2o %>%\n    h2o.metric() %>%\n    as_tibble() \n```\n:::\n\n\nLook at precision vs recall visualization\n\n::: {.cell hash='Chapter_5_Challenge_cache/html/unnamed-chunk-11_2449f3944370238c5af50ff43d8b849a'}\n\n```{.r .cell-code}\nperformance_tbl %>%\n    filter(f1 == max(f1))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 20\n  threshold    f1    f2 f0point5 accuracy precision recall specificity\n      <dbl> <dbl> <dbl>    <dbl>    <dbl>     <dbl>  <dbl>       <dbl>\n1     0.303 0.935 0.927    0.943    0.984     0.949  0.922       0.993\n# ℹ 12 more variables: absolute_mcc <dbl>, min_per_class_accuracy <dbl>,\n#   mean_per_class_accuracy <dbl>, tns <dbl>, fns <dbl>, fps <dbl>, tps <dbl>,\n#   tnr <dbl>, fnr <dbl>, fpr <dbl>, tpr <dbl>, idx <int>\n```\n:::\n\n```{.r .cell-code}\nperformance_tbl %>%\n    ggplot(aes(x = threshold)) +\n    geom_line(aes(y = precision), color = \"blue\", size = 1) +\n    geom_line(aes(y = recall), color = \"red\", size = 1) +\n    \n    # Insert line where precision and recall are harmonically optimized\n    geom_vline(xintercept = h2o.find_threshold_by_max_metric(performance_h2o, \"f1\")) +\n    labs(title = \"Precision vs Recall\", y = \"value\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n```\n:::\n\n::: {.cell-output-display}\n![](Chapter_5_Challenge_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nROC plot\n\n::: {.cell hash='Chapter_5_Challenge_cache/html/unnamed-chunk-12_4824550257daf1694216130939772a68'}\n\n```{.r .cell-code}\npath <- \"leadermodel_h2o\\\\StackedEnsemble_AllModels_4_AutoML_11_20230615_00001\"\n\nload_model_performance_metrics <- function(path, valid_h2o) {\n    \n    model_h2o <- h2o.loadModel(path)\n    perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(valid_h2o)) \n    \n    perf_h2o %>%\n        h2o.metric() %>%\n        as_tibble() %>%\n        mutate(auc = h2o.auc(perf_h2o)) %>%\n        select(tpr, fpr, auc)\n    \n}\n\nmodel_metrics_tbl <- fs::dir_info(path = \"leadermodel_h2o\\\\\") %>%\n    select(path) %>%\n    mutate(metrics = map(path, load_model_performance_metrics, valid_h2o)) %>%\n    unnest(cols = metrics)\n\nmodel_metrics_tbl %>%\n    mutate(\n        # Extract the model names\n        path = str_split(path, pattern = \"/\", simplify = T)[,1] %>% as_factor(),\n        auc  = auc %>% round(3) %>% as.character() %>% as_factor()\n        ) %>%\n    ggplot(aes(fpr, tpr, color = path, linetype = auc)) +\n    geom_line(size = 1) +\n    \n    # just for demonstration purposes\n    geom_abline(color = \"red\", linetype = \"dotted\") +\n    \n    labs(\n        title = \"ROC Plot\",\n        subtitle = \"Performance of Top Performing Model\"\n    )\n```\n\n::: {.cell-output-display}\n![](Chapter_5_Challenge_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='Chapter_5_Challenge_cache/html/unnamed-chunk-13_45b67b09bf170049f4300199c668c3af'}\n\n```{.r .cell-code}\n# Precision vs Recall\n\nload_model_performance_metrics <- function(path, test_tbl) {\n    \n    model_h2o <- h2o.loadModel(path)\n    perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) \n    \n    perf_h2o %>%\n        h2o.metric() %>%\n        as_tibble() %>%\n        mutate(auc = h2o.auc(perf_h2o)) %>%\n        select(tpr, fpr, auc, precision, recall)\n    \n}\n\nmodel_metrics_tbl <- fs::dir_info(path = \"leadermodel_h2o\\\\\") %>%\n    select(path) %>%\n    mutate(metrics = map(path, load_model_performance_metrics, valid_h2o)) %>%\n    unnest(cols = metrics)\n\nmodel_metrics_tbl %>%\n    mutate(\n        path = str_split(path, pattern = \"/\", simplify = T)[,1] %>% as_factor(),\n        auc  = auc %>% round(3) %>% as.character() %>% as_factor()\n    ) %>%\n    ggplot(aes(recall, precision, color = path, linetype = auc)) +\n    geom_line(size = 1) +\n    labs(\n        title = \"Precision vs Recall Plot\",\n        subtitle = \"Performance of Top Performing Model\"\n    )\n```\n\n::: {.cell-output-display}\n![](Chapter_5_Challenge_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nGain\n\n::: {.cell hash='Chapter_5_Challenge_cache/html/unnamed-chunk-14_60629759be5b7dc0bb05e0221e793373'}\n\n```{.r .cell-code}\ngain_lift_tbl <- performance_h2o %>%\n    h2o.gainsLift() %>%\n    as.tibble()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `as.tibble()` was deprecated in tibble 2.0.0.\nℹ Please use `as_tibble()` instead.\nℹ The signature and semantics have changed, see `?as_tibble`.\n```\n:::\n\n```{.r .cell-code}\n## Gain Chart\n\ngain_transformed_tbl <- gain_lift_tbl %>% \n    select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%\n    select(-contains(\"lift\")) %>%\n    mutate(baseline = cumulative_data_fraction) %>%\n    rename(gain     = cumulative_capture_rate) %>%\n    # prepare the data for the plotting (for the color and group aesthetics)\n    pivot_longer(cols = c(gain, baseline), values_to = \"value\", names_to = \"key\")\n\ngain_transformed_tbl %>%\n    ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n    geom_line(size = 1.5) +\n    labs(\n        title = \"Gain Chart\",\n        x = \"Cumulative Data Fraction\",\n        y = \"Gain\"\n    )\n```\n\n::: {.cell-output-display}\n![](Chapter_5_Challenge_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nLift\n\n::: {.cell hash='Chapter_5_Challenge_cache/html/unnamed-chunk-15_2a0cc9ea8ed7de635198efdb3a4f6d17'}\n\n```{.r .cell-code}\n## Lift Plot\n\nlift_transformed_tbl <- gain_lift_tbl %>% \n    select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%\n    select(-contains(\"capture\")) %>%\n    mutate(baseline = 1) %>%\n    rename(lift = cumulative_lift) %>%\n    pivot_longer(cols = c(lift, baseline), values_to = \"value\", names_to = \"key\")\n\nlift_transformed_tbl %>%\n    ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n    geom_line(size = 1.5) +\n    labs(\n        title = \"Lift Chart\",\n        x = \"Cumulative Data Fraction\",\n        y = \"Lift\"\n    )\n```\n\n::: {.cell-output-display}\n![](Chapter_5_Challenge_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}